#!/usr/bin/env python3


import argparse
import pathlib
import sys
from typing import Iterator, TextIO


def generate_input_files(input_paths: list[pathlib.Path]) -> Iterator[TextIO]:
    if not input_paths:
        yield sys.stdin
        return
    seen_stdin = False
    for input_path in input_paths:
        if input_path == "-" and not seen_stdin:
            seen_stdin = True
            yield sys.stdin
        yield open(input_path, "r")


def make_output_file(output_path: pathlib.Path | None) -> TextIO:
    if not output_path or output_path == "-":
        return sys.stdout
    return open(output_path)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("count", type=int)
    parser.add_argument("--method", "-m", choices=["words", "bytes"], default="words")
    parser.add_argument("--null", "-0", action="store_true", default=False)
    parser.add_argument("--input", "-i", nargs="*", type=pathlib.Path)
    parser.add_argument("--output", "-o", nargs="?", type=pathlib.Path)
    args = parser.parse_args()

    output_file = make_output_file(args.output)

    terminator = "\x00" if args.null else "\n"
    translation = str.maketrans("\t\r\n", "   ")

    for input_file in generate_input_files(args.input):
        content = input_file.read()

        if args.method == "words":
            content = content.translate(translation)
            word_index = 0
            line_index = 0
            for word in content.split(" "):
                word = word.strip()
                if word:
                    if word_index == args.count:
                        line_index += 1
                        word_index = 0
                        output_file.write(terminator)
                    elif word_index != 0:
                        output_file.write(" ")
                    word_index += 1
                    output_file.write(word)

        elif args.method == "bytes":
            byte_index = 0
            while byte_index < len(content):
                next_byte_index = min(byte_index + args.count, len(content))
                chunk = content[byte_index:next_byte_index]
                output_file.write(chunk)
                output_file.write(terminator)
                byte_index = next_byte_index

        if input_file != sys.stdin:
            input_file.close()

    output_file.write(terminator)
    output_file.close()
