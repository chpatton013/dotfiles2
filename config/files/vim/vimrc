" Buffer initialization
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Behavior of several plugins depends on filetype being set. Setting it early
" helps get consistent behavior from them.
augroup FileTypeAssociation
  autocmd!
  autocmd BufNewFile,BufRead *.impl,*.inl setlocal filetype=cpp
  autocmd BufNewFile,BufRead *.jsx setlocal filetype=javascript.jsx
  autocmd BufNewFile,BufRead *.launch,*.plist setlocal filetype=xml
  autocmd BufNewFile,BufRead *.make setlocal filetype=make
  autocmd BufNewFile,BufRead *.snippets setlocal filetype=snippets
  autocmd BufNewFile,BufRead *.tsx setlocal filetype=typescript.tsx
  autocmd BufNewFile,BufRead *.txt,README,INSTALL,NEWS,TODO setlocal filetype=text
  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
  autocmd BufNewFile,BufRead *.vue setlocal filetype=vue.html.javascript.css
  autocmd BufNewFile,BufRead Vagrantfile setlocal filetype=ruby
augroup END

" Variable initialization
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Disable auto-formatting by default
let b:auto_format_enabled=0

" Definitions of auto formatters
let g:formatdef_buildifier='"buildifier -mode=fix -path=".expand("%:p")'
let g:formatdef_shfmt='"shfmt -s -i ".(&expandtab ? shiftwidth() : "0")'

" Use `,` instead of `\` for the map leader
let g:mapleader=','
let g:maplocalleader=','

" UltiSnips
let g:UltiSnipsExpandTrigger='<C-Space>'
let g:UltiSnipsListSnippets='<C-Tab>'
let g:UltiSnipsJumpForwardTrigger='<C-j>'
let g:UltiSnipsJumpBackwardTrigger='<C-k>'

augroup FileTypeVariables
  autocmd!

  " Enable auto-formatting for certain filetypes
  " autocmd FileType bzl,c,cpp,protobuf let b:auto_format_enabled=1
  autocmd FileType bzl let b:auto_format_enabled=1

  " Disable auto-indenting for filetypes without good indent files
  autocmd FileType vim,tex let b:autoformat_autoindent=0
augroup END

" Plugin configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Initialize VimPlug and setup plugins
call plug#begin('~/.vim/plugged')

" Visual miscellanea
Plug 'altercation/vim-colors-solarized' " Solarized color theme for vim
Plug 'airblade/vim-gitgutter' " Git diff markings in the buffer gutter
Plug 'wesQ3/vim-windowswap' " Window swapping keybindings

" Editing miscellanea
Plug 'PeterRincker/vim-argumentative' " Rearrange function arguments
" Plug 'SirVer/ultisnips' " Code snippet completion
Plug 'tpope/vim-abolish' " Assorted word-munging utilities (Abolish, Subvert, Coerce)
Plug 'tpope/vim-apathy' " Filetype-aware values for path, suffixesadd, include, includeexpr, and define
Plug 'tpope/vim-characterize' " Additional character information visible with `ga`
Plug 'tpope/vim-commentary' " Easy (un)commenting of code blocks
Plug 'tpope/vim-fugitive' " Integrated git commands
Plug 'tpope/vim-repeat' " Better command classification for `.`
Plug 'tpope/vim-sensible' " Good defaults for everyone
Plug 'tpope/vim-speeddating' " {In,De}crement (<C-A>, <C-X>) works with datetimes
Plug 'vim-autoformat/vim-autoformat' " Syntax-aware code formatting

" Fuzzy file-finder and associated commands/mappings
Plug 'junegunn/fzf' |
  \ Plug 'junegunn/fzf.vim'

" Filesystem navigation interface
Plug 'preservim/nerdtree' |
  \ Plug 'Xuyuanp/nerdtree-git-plugin'

" Syntax highlighting for toml
Plug 'cespare/vim-toml', {'for': ['toml']}

" Syntax highlighting for JS, TS, React.js and Vue.js
Plug 'yuezk/vim-js', {'for': ['javascript']} |
  \ Plug 'HerringtonDarkholme/yats.vim', {'for': ['typescript']} |
  \ Plug 'maxmellon/vim-jsx-pretty', {'for': ['javascript.jsx', 'typescript.tsx']} |
  \ Plug 'posva/vim-vue', {'for': ['vue']}

call plug#end()

" Spell check settings (disabled by default)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set dictionary+=spell
if filereadable('/usr/share/dict/words')
  set dictionary+=/usr/share/dict/words
endif
set spelllang=en_us

" Platform compatibility
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

behave xterm              " Always use Linux keybindings (even on Windows)
set shell=bash            " Run subcommands in bash shell
set shellpipe=2>&1\|tee   " Redirect shell pipe stderr to stdout
set shellslash            " Use forward slashes regardless of OS

" File management
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set noswapfile        " Do not use swap files
set noautoread        " Overwrite setting in vim-sensible
scriptencoding utf-8  " Treat all files like UTF-8
set encoding=utf-8
set fileencoding=utf-8

" Buffer management
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set hidden  " Use hidden buffers so unsaved buffers can go to the background

" Use C-hjkl to change splits
nnoremap <C-h> <C-w><Left>
nnoremap <C-j> <C-w><Down>
nnoremap <C-k> <C-w><Up>
nnoremap <C-l> <C-w><Right>

" Use C-t to change tabs
nnoremap <C-t>e :tabnew<CR>
nnoremap <C-t>% :tabnew<Space>%<CR>
nnoremap <C-t>n :tabnext<CR>
nnoremap <C-t>p :tabprevious<CR>
nnoremap <C-t>d :tabclose<CR>

" Window behavior
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set laststatus=2          " Last window will always have a status line
set lazyredraw            " Defer screen redraw when running commands
set showcmd               " Show (partial) command in the command line
set showmode              " Show the current editor mode in the command line
set splitright splitbelow " Open window splits below and to the right

" Toggle NERDTree sidepanel open/close
nnoremap <Leader>t :NERDTreeToggle<CR>

" Toggle GitGutter on/off
nnoremap <Leader>G :GitGutterToggle<CR>
nnoremap <Leader>g :GitGutterBufferToggle<CR>

" Text rendering
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set breakindent   " Indent wrapped lines
set cpoptions+=$  " Show dollar sign at end of text to be changed
set display+=uhex " Show unprintable characters hexadecimal as <xx> instead of using ^C and ~C
set nowrap        " Do not soft-wrap lines by default
set showmatch     " Show matching () {} etc
set list listchars=tab:⇥·,trail:·,extends:⇉,precedes:⇇,conceal:░,nbsp:␣
set fillchars=fold:░

" Toggle various invertible settings on/off
nnoremap <Leader>c :set cursorline!<CR>
nnoremap <Leader>h :set hlsearch!<CR>
nnoremap <Leader>n :set number!<CR>
nnoremap <Leader>r :set relativenumber!<CR>
nnoremap <Leader>w :set wrap!<CR>

" Folding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set foldmethod=syntax   " Set fold method (manual,indent,expr,syntax,diff,marker)
set nofoldenable        " Do not open file folded

" Toogle foldenable and foldcolumn on/off in tandem
function! ToggleFoldEnable() abort
  if &foldenable
    set nofoldenable
    set foldcolumn=0
  else
    set foldenable
    set foldcolumn=2
  endif
endfunction
nnoremap <Leader>x :call ToggleFoldEnable()<CR>

" Input behavior
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set modeline          " Check files for a modeline to apply config settings
set mouse=            " Disable mouse input
set nojoinspaces      " Do not insert two spaces after a '.', '?', and '!'
set textwidth=80      " Automatically break lines at whitespace to get this width
set virtualedit=block " Allow the cursor to move to columns without text

" Make y behave like all other capitals (yank to end of line)
nnoremap Y y$

" Smash to exit insert mode because <Esc> is too far away from home row
inoremap kj <Esc>

" No one ever intends to enter ex-mode. Make it harder by rebinding to QQ
nnoremap Q <nop>
nnoremap QQ Q

" Toogle paste mode on/off
nnoremap <Leader>p :set paste!<CR>

" Tab handling
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set expandtab     " Use the appropriate number of spaces to insert a <Tab>
set shiftwidth=2  " Number of spaces to use for each step of (auto)indent.
set tabstop=2     " Number of spaces that a <Tab> in the file counts for
set softtabstop=2 " Number of spaces that a <Tab> counts for while performing editing operations

" Comment formatting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set commentstring=#\ %s         " Most languages use `#` as their line-comment character
set formatoptions+=r            " Insert comment leader after hitting <Enter>
set formatoptions+=o            " Insert comment leader after hitting 'o' or 'O' in command mode
set autoindent formatoptions+=n " Auto-format lists, wrapping to text after the list bullet char (requires autoindent)
set formatoptions+=l            " Don't auto-wrap if a line is already longer than textwidth

" Text search
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set incsearch             " Highlight matches for the current search
set hlsearch              " Highlight matches for previous search
set ignorecase smartcase  " Searches are case-insensitive unless upper case characters are used
set wrapscan              " Searches wrap around the end of the file

" Filesystem search
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set wildignore=*.sw?,*.pyc      " Ignore generated files in the source tree
set wildignorecase              " Tab completion is case-insensitive
set wildmode=list:longest,full  " Tab completion lists matches, then opens wildmenu on next <Tab>

" Autoformat plugin
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Toggle enamed status of auto-format for this buffer
function! AutoFormatToggle() abort
  if exists("b:auto_format_enabled") && b:auto_format_enabled
    :echo 'Disabling auto-formatting'
    let b:auto_format_enabled=0
  elseif b:auto_format_enabled
    :echo 'Enabling auto-formatting'
    let b:auto_format_enabled=1
  endif
endfunction

" Only auto-format if enabled for this buffer
function! AutoFormatIfEnabled() abort
  if exists("b:auto_format_enabled") && b:auto_format_enabled
    :echo 'Auto-formatting buffer'
    :Autoformat
  endif
endfunction

" Automatic formatting
augroup AutoFormatOnWrite
  autocmd!
  autocmd BufWritePre * call AutoFormatIfEnabled()
augroup END

" Manual formatting
nnoremap <Leader>f :Autoformat<CR>
xnoremap <Leader>f :Autoformat<CR>
nnoremap <Leader>F :call AutoFormatToggle()<CR>

" Color theme
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set background=light
set t_Co=256                  " Use as many colors as your terminal supports
set term=screen-256color      " Use 256-color screen emulation
silent! colorscheme solarized " Must be silent so Plug does not fail when installing for the first time

function! ChangeBackground()
  let state_dir = empty($XDG_STATE_HOME) ?  $HOME . '/.local/state' : $XDG_STATE_HOME
  let theme_file = state_dir . '/vim/theme'
  if filereadable(theme_file) && join(readfile(theme_file), '\n') == 'dark'
    set background=dark
  else
    set background=light
  endif

  " Must be silent so Plug does not fail when installing for the first time
  silent! colorscheme solarized
endfunction

augroup ChangeBackgroundOnSIGUSR1
  autocmd!
  autocmd SigUSR1 * call ChangeBackground()
augroup END

call ChangeBackground()

" Local overrides for specific filetypes
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

augroup FileTypeSettings
  autocmd!

  " Comment strings differ from `#` in these languages
  autocmd FileType c,cpp,proto setlocal commentstring=//\ %s
  autocmd FileType vim setlocal commentstring=\"\ %s

  " Enable spell-check in prose
  autocmd FileType gitcommit,mail,markdown,text setlocal spell

  " Use indent-folding in syntax-sparse filetypes
  autocmd FileType bzl,python,vim setlocal foldmethod=indent

  " Do not trigger indent when `:` is pressed
  autocmd FileType bzl,python,yaml
    \ setlocal indentkeys-=<:>

  " 4-space indentation in Python-like languages
  autocmd FileType bzl,python
    \ setlocal shiftwidth=4 |
    \ setlocal tabstop=4 |
    \ setlocal softtabstop=4

  " Tabs are different than spaces in make syntax
  autocmd FileType make setlocal noexpandtab

  " Vue files intermix multiple syntaxes, so we have to recalculate style from
  " the start of the file to prevent parsing errors
  autocmd FileType vue syntax sync fromstart
augroup END
